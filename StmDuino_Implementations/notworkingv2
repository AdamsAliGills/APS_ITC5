#include "motion_fx.h"
#include "LSM6DSLSensor.h"
#include <BasicLinearAlgebra.h>

using namespace BLA;

constexpr uint32_t ALGO_FREQ = 100U; // Algorithm frequency 100Hz
constexpr uint32_t ALGO_PERIOD = 1000U / ALGO_FREQ; // Algorithm period [ms]
constexpr float MOTION_FX_ENGINE_DELTATIME = 0.01f;
constexpr float FROM_MG_TO_G = 0.001f;
constexpr float FROM_G_TO_MG = 1000.0f;
constexpr float FROM_MDPS_TO_DPS = 0.001f;
constexpr float FROM_DPS_TO_MDPS = 1000.0f;

constexpr size_t STATE_SIZE = 2432U;
constexpr int SAMPLETODISCARD = 15;
constexpr float GBIAS_ACC_TH_SC = 2.0f * 0.000765f;
constexpr float GBIAS_GYRO_TH_SC = 2.0f * 0.002f;
constexpr uint32_t DECIMATION = 1U;

class MotionController {
public:
   

    void setup();
    void loop();
    Matrix<2,1> ObserverUpdate(const Matrix<2, 1, float>& y);
    Matrix<2,1> IntegError(const Matrix<2, 1, float>& y, const Matrix<2, 1, float>& r);
    Matrix<2,1> InputXD(const Matrix<2,1, float>& u_e);
    Matrix<2,1> pwmMap();
    MotionController() : AccGyr(&Wire, LSM6DSL_ACC_GYRO_I2C_ADDRESS_HIGH){}
    static void fusion_update();
    volatile uint8_t fusion_flag; 
    static BLA::Matrix<6, 6, float> A;
    static BLA::Matrix<6, 2> B;
    static BLA::Matrix<2, 6> C;
    static BLA::Matrix<6, 2, float> L;
    static BLA::Matrix<2, 2, float> K_i;
    static BLA::Matrix<2, 6, float> K_f;

private:
    LSM6DSLSensor AccGyr;
    int32_t accelerometer[3];
    int32_t gyroscope[3];
    int32_t magnetometer[3];
    int32_t MagOffset[3];
    int sampleToDiscard;
    int discardedCount = 0;
    char LibVersion[35];
    int LibVersionLen;
    HardwareTimer *MyTim;
    Matrix<2, 1, float> r = {0.0f, 0.0f};
    Matrix<2, 1, float> y = {0.0f, 0.0f};
    Matrix<6, 1, float> x_est = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    Matrix<2, 1, float> u_e = {0.0f, 0.0f};
    Matrix<2, 1, float> integralError = {0.0f, 0.0f};
    MFX_knobs_t iKnobs;
    MFX_knobs_t *ipKnobs = &iKnobs;
    uint8_t mfxstate[STATE_SIZE];

};


BLA::Matrix<6, 6, float> MotionController::A = {   
  0,    1.0000,         0,         0,         0,         0,
  -4.5796,         0,         0,         0,    0.1460,    0.1460,
  0,         0,         0,    1.0000,         0,         0,
  0,         0,   -0.9344,         0,    0.5376,   -0.5376,
  0,         0,         0,         0,   -2.2472,         0,
  0,         0,         0,        0,         0,   -2.2472};

BLA::Matrix<6, 2> MotionController::B = {  
  0,         0,
  0,         0,
  0,         0,
  0,         0,
  20.6292,   0,
  0,   20.6292 };

BLA::Matrix<2, 6> MotionController::C = { 
  1,     0,     0,     0,     0,     0,
  0,     0,     1,     0,     0,     0
 };

BLA::Matrix<6, 2, float> MotionController::L = { 
  5.0579,    0.0773,
  -3.1079,    0.3535,
  0.0966,    5.1477,
  0.4394,    0.5170,
  10.9207,    2.1885,
  11.5894,   -4.1788
 };

BLA::Matrix<2, 2, float> MotionController::K_i = {  
  -2.2361,   -2.2361,    
  -2.2361,    2.2361 };

BLA::Matrix<2, 6, float> MotionController::K_f = { 
   0.1856,    1.0714,    3.5135,    1.6571,    0.2086,   -0.1121,
  0.1856,    1.0714,   -3.5135,   -1.6571,   -0.1121,    0.2086
 };

void MotionController::setup() {

    Serial.begin(115200);
    while (!Serial) yield();


    Wire.begin();
    Wire.setClock(400000);


    AccGyr.begin();
    AccGyr.Set_X_ODR((float)ALGO_FREQ);
    AccGyr.Set_X_FS(4);
    AccGyr.Set_G_ODR((float)ALGO_FREQ);
    AccGyr.Set_G_FS(2000);
    AccGyr.Enable_X();
    AccGyr.Enable_G();
    delay(10);

    MotionFX_initialize((MFXState_t *)mfxstate);

    MotionFX_getKnobs(mfxstate, ipKnobs);

    ipKnobs->acc_orientation[0] = 'n';
    ipKnobs->acc_orientation[1] = 'w';
    ipKnobs->acc_orientation[2] = 'u';
    ipKnobs->gyro_orientation[0] = 'n';
    ipKnobs->gyro_orientation[1] = 'w';
    ipKnobs->gyro_orientation[2] = 'u';

    ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
    ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;

    ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
    ipKnobs->LMode = 1;
    ipKnobs->modx = DECIMATION;

    MotionFX_setKnobs(mfxstate, ipKnobs);
    MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
    MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);

    LibVersionLen = (int)MotionFX_GetLibVersion(LibVersion);

    MyTim = new HardwareTimer(TIM3);
    MyTim->setOverflow(ALGO_FREQ, HERTZ_FORMAT);
    MyTim->attachInterrupt(MotionController::fusion_update);
    MyTim->resume();
}

void MotionController::loop() {
    if (fusion_flag) {
        MFX_input_t data_in;
        MFX_output_t data_out;

        fusion_flag = 0;


        AccGyr.Get_X_Axes(accelerometer);
        AccGyr.Get_G_Axes(gyroscope);

        data_in.gyro[0] = (float)gyroscope[0] * FROM_MDPS_TO_DPS;
        data_in.gyro[1] = (float)gyroscope[1] * FROM_MDPS_TO_DPS;
        data_in.gyro[2] = (float)gyroscope[2] * FROM_MDPS_TO_DPS;

        data_in.acc[0] = (float)accelerometer[0] * FROM_MG_TO_G;
        data_in.acc[1] = (float)accelerometer[1] * FROM_MG_TO_G;
        data_in.acc[2] = (float)accelerometer[2] * FROM_MG_TO_G;

        data_in.mag[0] = 0.0f;
        data_in.mag[1] = 0.0f;
        data_in.mag[2] = 0.0f;
        float delta_time = MOTION_FX_ENGINE_DELTATIME;
        if (discardedCount >= sampleToDiscard) {

            MotionFX_propagate(mfxstate, &data_out, &data_in, &delta_time);
            MotionFX_update(mfxstate, &data_out, &data_in, &delta_time, NULL);


            y(0, 0) = data_out.rotation[0];
            y(1, 0) = data_out.linear_acceleration[1];

            ObserverUpdate(y);
            pwmMap();
            Serial.println(y(0,0));

            discardedCount = 0;
        } else {
            discardedCount++;
        }
    }
}


void MotionController::fusion_update() {
    fusion_flag = 1;
    }

Matrix<2, 1, float> MotionController::ObserverUpdate(const Matrix<2, 1, float>& y) {
  // Compute A_obs = A - LC
  BLA::Matrix<6, 6, float> lc = L * C; 
  BLA::Matrix<6, 6, float> A_obs = A - lc;
  
  // Compute B_obs = [B, L]
  BLA::Matrix<6, 4, float> B_obs = B || L;

  // Comput u ; y_meas
  Matrix<2,1, float> input = InputXD(u_e);
  BLA::Matrix<4, 1, float> uy = input && y;

  // Compute x_est_next = A_obs * x_est + B_obs * [u; y_meas]
  BLA::Matrix<6, 1, float> B_uy = B_obs * uy;
  BLA::Matrix<6, 1, float> A_est = A_obs * x_est;
  BLA::Matrix<6, 1, float> x_est_next = A_est + B_uy;

  // Update the x_est to the current calc
  if (x_est_next(0, 0) > 300) x_est_next(0, 0) = 300;
  if (x_est_next(1, 0) > 300) x_est_next(1, 0) = 300;
  x_est = x_est_next;
  u_e = -K_f * x_est_next; 


  return u_e;
}

Matrix<2, 1, float> MotionController::IntegError(const Matrix<2, 1, float>& y, const Matrix<2, 1, float>& r) {
  BLA::Matrix<2,1, float> Error = r - y; 
  float  dt = 0.01f;
  integralError += Error * dt;
  integralError = -K_i * integralError; 
  Serial.println(Error(0,0));
  Serial.println(Error(1,0));
  return integralError; 
}

Matrix<2, 1, float> MotionController::InputXD(const Matrix<2, 1, float>& u_e) {
  BLA::Matrix<2,1, float> integralErrors = IntegError(y, r);
  Matrix<2,1, float> input;
  input = integralErrors + u_e;  

  return input;
}

Matrix<2, 1, float> MotionController::pwmMap() {
  BLA::Matrix<2,1,float> inputs = InputXD(u_e);
  int pwm1 = map(inputs(0,0), -1, 1, 1000, 2000);
  int pwm2 = map(inputs(1,0), -1, 1, 1000, 2000);
  return pwm1, pwm2;
}
int main() {
    MotionController controller;
    controller.setup();
    while (true) {
        controller.loop();
    }
    return 0;
}

